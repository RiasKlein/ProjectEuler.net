#################################################################################
#
#	evenFib.py 
#
#	Project Euler (projecteuler.net) Problem 2 									
#	Even Fibonacci Numbers
#
#	Each new term in the Fibonacci sequence is generated by adding the 
#	previous two terms. By starting with 1 and 2, the first 10 terms will be:
#		1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# 	By considering the terms in the Fibonacci sequence whose values do not 
# 	exceed four million, find the sum of the even-valued terms.
#
#	Program by: Shunman Tse 
#
#################################################################################

# Global Variable
max_value = 4000000

# iter_fib
# 	Function will iteratively generate fibonacci numbers up until the max_value
#	The generated numbers are stored in a list and this list is returned
#	Note: The Fibonacci sequence is considered with 1, 2 as the base elements
def iter_fib ( max_value ):
	fib_list = [1, 2]	# list of generated fibonacci numbers

	next_value = fib_list[-1] + fib_list[-2]
	while (next_value < max_value):
		fib_list.append (next_value) # Add the new fib value into the list
		next_value = fib_list[-1] + fib_list[-2] 

	return (fib_list)

# main
#	Function generates the list of fibonacci numbers up to max_value
#	All even numbers in the list are summed into variable 'total'
#	Finally, the sum is printed out
def main():
	fib_list = iter_fib (max_value)		# get the list of fib numbers

	total = 0 
	for num in fib_list:
		if num % 2 == 0:
			total += num

	print ("The sum of the even-valued terms (not exceeding " + str(max_value) + ") is: " + str(total))

main()




